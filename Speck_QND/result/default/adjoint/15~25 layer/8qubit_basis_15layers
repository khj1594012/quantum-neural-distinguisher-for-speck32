hj@hj-TFG5576XG:~/다운로드/SPECK$ python3 ds1_8qubit.py 
2023-02-28 17:31:05.023435: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-02-28 17:31:05.612898: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-11.2/lib64
2023-02-28 17:31:05.612948: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-11.2/lib64
2023-02-28 17:31:05.612960: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-02-28 17:31:08.324270: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-02-28 17:31:08.328968: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-02-28 17:31:08.329487: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-02-28 17:31:08.329983: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-02-28 17:31:08.330540: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-02-28 17:31:08.330981: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-02-28 17:31:08.331397: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-02-28 17:31:08.668008: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-02-28 17:31:08.668433: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-02-28 17:31:08.668815: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-02-28 17:31:08.669097: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 4108 MB memory:  -> device: 0, name: NVIDIA GeForce RTX 3060 Laptop GPU, pci bus id: 0000:01:00.0, compute capability: 8.6
Model: "model"
__________________________________________________________________________________________________
 Layer (type)                   Output Shape         Param #     Connected to                     
==================================================================================================
 input_1 (InputLayer)           [(None, 64)]         0           []                               
                                                                                                  
 tf.split (TFOpLambda)          [(None, 8),          0           ['input_1[0][0]']                
                                 (None, 8),                                                       
                                 (None, 8),                                                       
                                 (None, 8),                                                       
                                 (None, 8),                                                       
                                 (None, 8),                                                       
                                 (None, 8),                                                       
                                 (None, 8)]                                                       
                                                                                                  
 keras_layer_1 (KerasLayer)     (None, 8)            120         ['tf.split[0][0]']               
                                                                                                  
 keras_layer_2 (KerasLayer)     (None, 8)            120         ['tf.split[0][1]']               
                                                                                                  
 keras_layer_3 (KerasLayer)     (None, 8)            120         ['tf.split[0][2]']               
                                                                                                  
 keras_layer_4 (KerasLayer)     (None, 8)            120         ['tf.split[0][3]']               
                                                                                                  
 keras_layer_5 (KerasLayer)     (None, 8)            120         ['tf.split[0][4]']               
                                                                                                  
 keras_layer_6 (KerasLayer)     (None, 8)            120         ['tf.split[0][5]']               
                                                                                                  
 keras_layer_7 (KerasLayer)     (None, 8)            120         ['tf.split[0][6]']               
                                                                                                  
 keras_layer_8 (KerasLayer)     (None, 8)            120         ['tf.split[0][7]']               
                                                                                                  
 tf.concat (TFOpLambda)         (None, 64)           0           ['keras_layer_1[0][0]',          
                                                                  'keras_layer_2[0][0]',          
                                                                  'keras_layer_3[0][0]',          
                                                                  'keras_layer_4[0][0]',          
                                                                  'keras_layer_5[0][0]',          
                                                                  'keras_layer_6[0][0]',          
                                                                  'keras_layer_7[0][0]',          
                                                                  'keras_layer_8[0][0]']          
                                                                                                  
 dense_1 (Dense)                (None, 64)           4160        ['tf.concat[0][0]']              
                                                                                                  
 batch_normalization (BatchNorm  (None, 64)          256         ['dense_1[0][0]']                
 alization)                                                                                       
                                                                                                  
 activation (Activation)        (None, 64)           0           ['batch_normalization[0][0]']    
                                                                                                  
 dense_3 (Dense)                (None, 1)            65          ['activation[0][0]']             
                                                                                                  
==================================================================================================
Total params: 5,441
Trainable params: 5,313
Non-trainable params: 128
__________________________________________________________________________________________________
Epoch 1/10
2023-02-28 17:31:53.821152: I tensorflow/compiler/xla/service/service.cc:173] XLA service 0x23bb3790 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:
2023-02-28 17:31:53.821209: I tensorflow/compiler/xla/service/service.cc:181]   StreamExecutor device (0): NVIDIA GeForce RTX 3060 Laptop GPU, Compute Capability 8.6
2023-02-28 17:31:53.825492: I tensorflow/compiler/mlir/tensorflow/utils/dump_mlir_util.cc:268] disabling MLIR crash reproducer, set env var `MLIR_CRASH_REPRODUCER_DIRECTORY` to enable.
2023-02-28 17:31:53.973025: I tensorflow/compiler/jit/xla_compilation_cache.cc:477] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.
WARNING:tensorflow:5 out of the last 5 calls to <function _BaseOptimizer._update_step_xla at 0x7f0dd252daf0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
WARNING:tensorflow:5 out of the last 5 calls to <function _BaseOptimizer._update_step_xla at 0x7f0dd252daf0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
WARNING:tensorflow:6 out of the last 6 calls to <function _BaseOptimizer._update_step_xla at 0x7f0dd252daf0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
WARNING:tensorflow:6 out of the last 6 calls to <function _BaseOptimizer._update_step_xla at 0x7f0dd252daf0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
313/313 - 14944s - loss: 0.7205 - acc: 0.5022 - val_loss: 0.7074 - val_acc: 0.4930 - 14944s/epoch - 48s/step
Epoch 2/10
313/313 - 14959s - loss: 0.6945 - acc: 0.5359 - val_loss: 0.7110 - val_acc: 0.4888 - 14959s/epoch - 48s/step
Epoch 3/10
313/313 - 14926s - loss: 0.6858 - acc: 0.5468 - val_loss: 0.7088 - val_acc: 0.4952 - 14926s/epoch - 48s/step
Epoch 4/10
313/313 - 14932s - loss: 0.6801 - acc: 0.5644 - val_loss: 0.7115 - val_acc: 0.5060 - 14932s/epoch - 48s/step
Epoch 5/10
313/313 - 14960s - loss: 0.6736 - acc: 0.5805 - val_loss: 0.7086 - val_acc: 0.5018 - 14960s/epoch - 48s/step
Epoch 6/10

313/313 - 14958s - loss: 0.6646 - acc: 0.5971 - val_loss: 0.7104 - val_acc: 0.5118 - 14958s/epoch - 48s/step
Epoch 7/10
313/313 - 14952s - loss: 0.6466 - acc: 0.6303 - val_loss: 0.6341 - val_acc: 0.6508 - 14952s/epoch - 48s/step
Epoch 8/10
313/313 - 14942s - loss: 0.5847 - acc: 0.6967 - val_loss: 0.6059 - val_acc: 0.6796 - 14942s/epoch - 48s/step
Epoch 9/10
313/313 - 14952s - loss: 0.5673 - acc: 0.7171 - val_loss: 0.5968 - val_acc: 0.7042 - 14952s/epoch - 48s/step
Epoch 10/10
313/313 - 14968s - loss: 0.5568 - acc: 0.7260 - val_loss: 0.5971 - val_acc: 0.7060 - 14968s/epoch - 48s/step
32/32 [==============================] - 555s 17s/step
0.722
