hj@hj-TFG5576XG:~/다운로드/SPECK$ python3 ds1_8qubit.py 
2023-03-02 11:36:16.273522: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-03-02 11:36:16.886759: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-11.2/lib64
2023-03-02 11:36:16.886804: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-11.2/lib64
2023-03-02 11:36:16.886811: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-03-02 11:36:19.644514: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-03-02 11:36:19.649390: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-03-02 11:36:19.649859: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-03-02 11:36:19.650366: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-03-02 11:36:19.651204: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-03-02 11:36:19.651640: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-03-02 11:36:19.652006: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-03-02 11:36:19.999301: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-03-02 11:36:19.999750: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-03-02 11:36:20.000143: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-03-02 11:36:20.000439: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 4108 MB memory:  -> device: 0, name: NVIDIA GeForce RTX 3060 Laptop GPU, pci bus id: 0000:01:00.0, compute capability: 8.6
Model: "model"
__________________________________________________________________________________________________
 Layer (type)                   Output Shape         Param #     Connected to                     
==================================================================================================
 input_1 (InputLayer)           [(None, 64)]         0           []                               
                                                                                                  
 tf.split (TFOpLambda)          [(None, 8),          0           ['input_1[0][0]']                
                                 (None, 8),                                                       
                                 (None, 8),                                                       
                                 (None, 8),                                                       
                                 (None, 8),                                                       
                                 (None, 8),                                                       
                                 (None, 8),                                                       
                                 (None, 8)]                                                       
                                                                                                  
 keras_layer_1 (KerasLayer)     (None, 8)            200         ['tf.split[0][0]']               
                                                                                                  
 keras_layer_2 (KerasLayer)     (None, 8)            200         ['tf.split[0][1]']               
                                                                                                  
 keras_layer_3 (KerasLayer)     (None, 8)            200         ['tf.split[0][2]']               
                                                                                                  
 keras_layer_4 (KerasLayer)     (None, 8)            200         ['tf.split[0][3]']               
                                                                                                  
 keras_layer_5 (KerasLayer)     (None, 8)            200         ['tf.split[0][4]']               
                                                                                                  
 keras_layer_6 (KerasLayer)     (None, 8)            200         ['tf.split[0][5]']               
                                                                                                  
 keras_layer_7 (KerasLayer)     (None, 8)            200         ['tf.split[0][6]']               
                                                                                                  
 keras_layer_8 (KerasLayer)     (None, 8)            200         ['tf.split[0][7]']               
                                                                                                  
 tf.concat (TFOpLambda)         (None, 64)           0           ['keras_layer_1[0][0]',          
                                                                  'keras_layer_2[0][0]',          
                                                                  'keras_layer_3[0][0]',          
                                                                  'keras_layer_4[0][0]',          
                                                                  'keras_layer_5[0][0]',          
                                                                  'keras_layer_6[0][0]',          
                                                                  'keras_layer_7[0][0]',          
                                                                  'keras_layer_8[0][0]']          
                                                                                                  
 dense_1 (Dense)                (None, 64)           4160        ['tf.concat[0][0]']              
                                                                                                  
 batch_normalization (BatchNorm  (None, 64)          256         ['dense_1[0][0]']                
 alization)                                                                                       
                                                                                                  
 activation (Activation)        (None, 64)           0           ['batch_normalization[0][0]']    
                                                                                                  
 dense_3 (Dense)                (None, 1)            65          ['activation[0][0]']             
                                                                                                  
==================================================================================================
Total params: 6,081
Trainable params: 5,953
Non-trainable params: 128
__________________________________________________________________________________________________
Epoch 1/10
2023-03-02 11:37:24.054001: I tensorflow/compiler/xla/service/service.cc:173] XLA service 0x1ecb8b10 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:
2023-03-02 11:37:24.054051: I tensorflow/compiler/xla/service/service.cc:181]   StreamExecutor device (0): NVIDIA GeForce RTX 3060 Laptop GPU, Compute Capability 8.6
2023-03-02 11:37:24.058182: I tensorflow/compiler/mlir/tensorflow/utils/dump_mlir_util.cc:268] disabling MLIR crash reproducer, set env var `MLIR_CRASH_REPRODUCER_DIRECTORY` to enable.
2023-03-02 11:37:24.183031: I tensorflow/compiler/jit/xla_compilation_cache.cc:477] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.
WARNING:tensorflow:5 out of the last 5 calls to <function _BaseOptimizer._update_step_xla at 0x7fa725b7faf0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
WARNING:tensorflow:5 out of the last 5 calls to <function _BaseOptimizer._update_step_xla at 0x7fa725b7faf0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
WARNING:tensorflow:6 out of the last 6 calls to <function _BaseOptimizer._update_step_xla at 0x7fa725b7faf0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
WARNING:tensorflow:6 out of the last 6 calls to <function _BaseOptimizer._update_step_xla at 0x7fa725b7faf0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
313/313 - 24186s - loss: 0.7203 - acc: 0.5038 - val_loss: 0.7078 - val_acc: 0.4952 - 24186s/epoch - 77s/step
Epoch 2/10
313/313 - 24210s - loss: 0.6947 - acc: 0.5296 - val_loss: 0.7147 - val_acc: 0.4880 - 24210s/epoch - 77s/step
Epoch 3/10
313/313 - 24142s - loss: 0.6855 - acc: 0.5574 - val_loss: 0.7181 - val_acc: 0.4946 - 24142s/epoch - 77s/step
Epoch 4/10
313/313 - 24162s - loss: 0.6765 - acc: 0.5745 - val_loss: 0.7184 - val_acc: 0.4932 - 24162s/epoch - 77s/step
Epoch 5/10
313/313 - 24195s - loss: 0.6676 - acc: 0.5943 - val_loss: 0.7214 - val_acc: 0.4936 - 24195s/epoch - 77s/step
Epoch 6/10
313/313 - 24177s - loss: 0.6605 - acc: 0.6021 - val_loss: 0.7259 - val_acc: 0.4900 - 24177s/epoch - 77s/step
Epoch 7/10
313/313 - 24180s - loss: 0.6522 - acc: 0.6203 - val_loss: 0.7342 - val_acc: 0.4894 - 24180s/epoch - 77s/step
Epoch 8/10
313/313 - 24158s - loss: 0.6424 - acc: 0.6334 - val_loss: 0.7374 - val_acc: 0.4882 - 24158s/epoch - 77s/step
Epoch 9/10
313/313 - 24146s - loss: 0.6329 - acc: 0.6401 - val_loss: 0.7450 - val_acc: 0.4856 - 24146s/epoch - 77s/step
Epoch 10/10
313/313 - 24149s - loss: 0.6262 - acc: 0.6557 - val_loss: 0.7508 - val_acc: 0.4900 - 24149s/epoch - 77s/step
32/32 [==============================] - 882s 28s/step
0.485

